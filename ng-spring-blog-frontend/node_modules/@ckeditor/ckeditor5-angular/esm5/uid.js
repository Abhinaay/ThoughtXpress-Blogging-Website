/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @license Copyright (c) 2003-2020, CKSource - Frederico Knabben. All rights reserved.
 * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license
 */
// A copy of @ckeditor/ckeditor5-utils/src/uid.js
// A hash table of hex numbers to avoid using toString() in uid() which is costly.
// [ '00', '01', '02', ..., 'fe', 'ff' ]
var ɵ0 = /**
 * @param {?} val
 * @param {?} index
 * @return {?}
 */
function (val, index) { return ('0' + (index).toString(16)).slice(-2); };
/** @type {?} */
var HEX_NUMBERS = new Array(256).fill(0)
    .map((ɵ0));
/**
 * Returns a unique id. The id starts with an "e" character and a randomly generated string of
 * 32 alphanumeric characters.
 *
 * **Note**: The characters the unique id is built from correspond to the hex number notation
 * (from "0" to "9", from "a" to "f"). In other words, each id corresponds to an "e" followed
 * by 16 8-bit numbers next to each other.
 *
 * @return {?} An unique id string.
 */
export default function uid() {
    // Let's create some positive random 32bit integers first.
    //
    // 1. Math.random() is a float between 0 and 1.
    // 2. 0x100000000 is 2^32 = 4294967296.
    // 3. >>> 0 enforces integer (in JS all numbers are floating point).
    //
    // For instance:
    //		Math.random() * 0x100000000 = 3366450031.853859
    // but
    //		Math.random() * 0x100000000 >>> 0 = 3366450031.
    /** @type {?} */
    var r1 = Math.random() * 0x100000000 >>> 0;
    /** @type {?} */
    var r2 = Math.random() * 0x100000000 >>> 0;
    /** @type {?} */
    var r3 = Math.random() * 0x100000000 >>> 0;
    /** @type {?} */
    var r4 = Math.random() * 0x100000000 >>> 0;
    // Make sure that id does not start with number.
    return 'e' +
        HEX_NUMBERS[r1 >> 0 & 0xFF] +
        HEX_NUMBERS[r1 >> 8 & 0xFF] +
        HEX_NUMBERS[r1 >> 16 & 0xFF] +
        HEX_NUMBERS[r1 >> 24 & 0xFF] +
        HEX_NUMBERS[r2 >> 0 & 0xFF] +
        HEX_NUMBERS[r2 >> 8 & 0xFF] +
        HEX_NUMBERS[r2 >> 16 & 0xFF] +
        HEX_NUMBERS[r2 >> 24 & 0xFF] +
        HEX_NUMBERS[r3 >> 0 & 0xFF] +
        HEX_NUMBERS[r3 >> 8 & 0xFF] +
        HEX_NUMBERS[r3 >> 16 & 0xFF] +
        HEX_NUMBERS[r3 >> 24 & 0xFF] +
        HEX_NUMBERS[r4 >> 0 & 0xFF] +
        HEX_NUMBERS[r4 >> 8 & 0xFF] +
        HEX_NUMBERS[r4 >> 16 & 0xFF] +
        HEX_NUMBERS[r4 >> 24 & 0xFF];
}
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidWlkLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGNrZWRpdG9yL2NrZWRpdG9yNS1hbmd1bGFyLyIsInNvdXJjZXMiOlsidWlkLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7QUFVTyxVQUFFLEdBQUcsRUFBRSxLQUFLLElBQU0sT0FBQSxDQUFFLEdBQUcsR0FBRyxDQUFFLEtBQUssQ0FBRSxDQUFDLFFBQVEsQ0FBRSxFQUFFLENBQUUsQ0FBRSxDQUFDLEtBQUssQ0FBRSxDQUFDLENBQUMsQ0FBRSxFQUE5QyxDQUE4Qzs7SUFEakUsV0FBVyxHQUFHLElBQUksS0FBSyxDQUFFLEdBQUcsQ0FBRSxDQUFDLElBQUksQ0FBRSxDQUFDLENBQUU7S0FDNUMsR0FBRyxNQUFvRTs7Ozs7Ozs7Ozs7QUFZekUsTUFBTSxDQUFDLE9BQU8sVUFBVSxHQUFHOzs7Ozs7Ozs7Ozs7UUFXcEIsRUFBRSxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxXQUFXLEtBQUssQ0FBQzs7UUFDdEMsRUFBRSxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxXQUFXLEtBQUssQ0FBQzs7UUFDdEMsRUFBRSxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxXQUFXLEtBQUssQ0FBQzs7UUFDdEMsRUFBRSxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxXQUFXLEtBQUssQ0FBQztJQUU1QyxnREFBZ0Q7SUFDaEQsT0FBTyxHQUFHO1FBQ1QsV0FBVyxDQUFFLEVBQUUsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFFO1FBQzdCLFdBQVcsQ0FBRSxFQUFFLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBRTtRQUM3QixXQUFXLENBQUUsRUFBRSxJQUFJLEVBQUUsR0FBRyxJQUFJLENBQUU7UUFDOUIsV0FBVyxDQUFFLEVBQUUsSUFBSSxFQUFFLEdBQUcsSUFBSSxDQUFFO1FBQzlCLFdBQVcsQ0FBRSxFQUFFLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBRTtRQUM3QixXQUFXLENBQUUsRUFBRSxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUU7UUFDN0IsV0FBVyxDQUFFLEVBQUUsSUFBSSxFQUFFLEdBQUcsSUFBSSxDQUFFO1FBQzlCLFdBQVcsQ0FBRSxFQUFFLElBQUksRUFBRSxHQUFHLElBQUksQ0FBRTtRQUM5QixXQUFXLENBQUUsRUFBRSxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUU7UUFDN0IsV0FBVyxDQUFFLEVBQUUsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFFO1FBQzdCLFdBQVcsQ0FBRSxFQUFFLElBQUksRUFBRSxHQUFHLElBQUksQ0FBRTtRQUM5QixXQUFXLENBQUUsRUFBRSxJQUFJLEVBQUUsR0FBRyxJQUFJLENBQUU7UUFDOUIsV0FBVyxDQUFFLEVBQUUsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFFO1FBQzdCLFdBQVcsQ0FBRSxFQUFFLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBRTtRQUM3QixXQUFXLENBQUUsRUFBRSxJQUFJLEVBQUUsR0FBRyxJQUFJLENBQUU7UUFDOUIsV0FBVyxDQUFFLEVBQUUsSUFBSSxFQUFFLEdBQUcsSUFBSSxDQUFFLENBQUM7QUFDakMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2UgQ29weXJpZ2h0IChjKSAyMDAzLTIwMjAsIENLU291cmNlIC0gRnJlZGVyaWNvIEtuYWJiZW4uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBGb3IgbGljZW5zaW5nLCBzZWUgTElDRU5TRS5tZCBvciBodHRwczovL2NrZWRpdG9yLmNvbS9sZWdhbC9ja2VkaXRvci1vc3MtbGljZW5zZVxuICovXG5cbi8vIEEgY29weSBvZiBAY2tlZGl0b3IvY2tlZGl0b3I1LXV0aWxzL3NyYy91aWQuanNcblxuLy8gQSBoYXNoIHRhYmxlIG9mIGhleCBudW1iZXJzIHRvIGF2b2lkIHVzaW5nIHRvU3RyaW5nKCkgaW4gdWlkKCkgd2hpY2ggaXMgY29zdGx5LlxuLy8gWyAnMDAnLCAnMDEnLCAnMDInLCAuLi4sICdmZScsICdmZicgXVxuY29uc3QgSEVYX05VTUJFUlMgPSBuZXcgQXJyYXkoIDI1NiApLmZpbGwoIDAgKVxuXHQubWFwKCAoIHZhbCwgaW5kZXggKSA9PiAoICcwJyArICggaW5kZXggKS50b1N0cmluZyggMTYgKSApLnNsaWNlKCAtMiApICk7XG5cbi8qKlxuICogUmV0dXJucyBhIHVuaXF1ZSBpZC4gVGhlIGlkIHN0YXJ0cyB3aXRoIGFuIFwiZVwiIGNoYXJhY3RlciBhbmQgYSByYW5kb21seSBnZW5lcmF0ZWQgc3RyaW5nIG9mXG4gKiAzMiBhbHBoYW51bWVyaWMgY2hhcmFjdGVycy5cbiAqXG4gKiAqKk5vdGUqKjogVGhlIGNoYXJhY3RlcnMgdGhlIHVuaXF1ZSBpZCBpcyBidWlsdCBmcm9tIGNvcnJlc3BvbmQgdG8gdGhlIGhleCBudW1iZXIgbm90YXRpb25cbiAqIChmcm9tIFwiMFwiIHRvIFwiOVwiLCBmcm9tIFwiYVwiIHRvIFwiZlwiKS4gSW4gb3RoZXIgd29yZHMsIGVhY2ggaWQgY29ycmVzcG9uZHMgdG8gYW4gXCJlXCIgZm9sbG93ZWRcbiAqIGJ5IDE2IDgtYml0IG51bWJlcnMgbmV4dCB0byBlYWNoIG90aGVyLlxuICpcbiAqIEByZXR1cm5zIEFuIHVuaXF1ZSBpZCBzdHJpbmcuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVpZCgpIHtcblx0Ly8gTGV0J3MgY3JlYXRlIHNvbWUgcG9zaXRpdmUgcmFuZG9tIDMyYml0IGludGVnZXJzIGZpcnN0LlxuXHQvL1xuXHQvLyAxLiBNYXRoLnJhbmRvbSgpIGlzIGEgZmxvYXQgYmV0d2VlbiAwIGFuZCAxLlxuXHQvLyAyLiAweDEwMDAwMDAwMCBpcyAyXjMyID0gNDI5NDk2NzI5Ni5cblx0Ly8gMy4gPj4+IDAgZW5mb3JjZXMgaW50ZWdlciAoaW4gSlMgYWxsIG51bWJlcnMgYXJlIGZsb2F0aW5nIHBvaW50KS5cblx0Ly9cblx0Ly8gRm9yIGluc3RhbmNlOlxuXHQvL1x0XHRNYXRoLnJhbmRvbSgpICogMHgxMDAwMDAwMDAgPSAzMzY2NDUwMDMxLjg1Mzg1OVxuXHQvLyBidXRcblx0Ly9cdFx0TWF0aC5yYW5kb20oKSAqIDB4MTAwMDAwMDAwID4+PiAwID0gMzM2NjQ1MDAzMS5cblx0Y29uc3QgcjEgPSBNYXRoLnJhbmRvbSgpICogMHgxMDAwMDAwMDAgPj4+IDA7XG5cdGNvbnN0IHIyID0gTWF0aC5yYW5kb20oKSAqIDB4MTAwMDAwMDAwID4+PiAwO1xuXHRjb25zdCByMyA9IE1hdGgucmFuZG9tKCkgKiAweDEwMDAwMDAwMCA+Pj4gMDtcblx0Y29uc3QgcjQgPSBNYXRoLnJhbmRvbSgpICogMHgxMDAwMDAwMDAgPj4+IDA7XG5cblx0Ly8gTWFrZSBzdXJlIHRoYXQgaWQgZG9lcyBub3Qgc3RhcnQgd2l0aCBudW1iZXIuXG5cdHJldHVybiAnZScgK1xuXHRcdEhFWF9OVU1CRVJTWyByMSA+PiAwICYgMHhGRiBdICtcblx0XHRIRVhfTlVNQkVSU1sgcjEgPj4gOCAmIDB4RkYgXSArXG5cdFx0SEVYX05VTUJFUlNbIHIxID4+IDE2ICYgMHhGRiBdICtcblx0XHRIRVhfTlVNQkVSU1sgcjEgPj4gMjQgJiAweEZGIF0gK1xuXHRcdEhFWF9OVU1CRVJTWyByMiA+PiAwICYgMHhGRiBdICtcblx0XHRIRVhfTlVNQkVSU1sgcjIgPj4gOCAmIDB4RkYgXSArXG5cdFx0SEVYX05VTUJFUlNbIHIyID4+IDE2ICYgMHhGRiBdICtcblx0XHRIRVhfTlVNQkVSU1sgcjIgPj4gMjQgJiAweEZGIF0gK1xuXHRcdEhFWF9OVU1CRVJTWyByMyA+PiAwICYgMHhGRiBdICtcblx0XHRIRVhfTlVNQkVSU1sgcjMgPj4gOCAmIDB4RkYgXSArXG5cdFx0SEVYX05VTUJFUlNbIHIzID4+IDE2ICYgMHhGRiBdICtcblx0XHRIRVhfTlVNQkVSU1sgcjMgPj4gMjQgJiAweEZGIF0gK1xuXHRcdEhFWF9OVU1CRVJTWyByNCA+PiAwICYgMHhGRiBdICtcblx0XHRIRVhfTlVNQkVSU1sgcjQgPj4gOCAmIDB4RkYgXSArXG5cdFx0SEVYX05VTUJFUlNbIHI0ID4+IDE2ICYgMHhGRiBdICtcblx0XHRIRVhfTlVNQkVSU1sgcjQgPj4gMjQgJiAweEZGIF07XG59XG4iXX0=