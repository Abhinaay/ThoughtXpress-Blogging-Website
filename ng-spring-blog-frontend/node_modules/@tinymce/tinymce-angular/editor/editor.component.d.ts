import { AfterViewInit, ElementRef, NgZone, OnDestroy, InjectionToken } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { Events } from './Events';
import * as ɵngcc0 from '@angular/core';
export declare const TINYMCE_SCRIPT_SRC: InjectionToken<string>;
export declare class EditorComponent extends Events implements AfterViewInit, ControlValueAccessor, OnDestroy {
    private platformId;
    private tinymceScriptSrc?;
    disabled: any;
    readonly editor: any;
    ngZone: NgZone;
    cloudChannel: string;
    apiKey: string;
    init: Record<string, any> | undefined;
    id: string;
    initialValue: string | undefined;
    outputFormat: 'html' | 'text' | undefined;
    inline: boolean | undefined;
    tagName: string | undefined;
    plugins: string | undefined;
    toolbar: string | string[] | undefined;
    private _elementRef;
    private _element;
    private _disabled;
    private _editor;
    private onTouchedCallback;
    private onChangeCallback;
    constructor(elementRef: ElementRef, ngZone: NgZone, platformId: Object, tinymceScriptSrc?: string);
    writeValue(value: string | null): void;
    registerOnChange(fn: (_: any) => void): void;
    registerOnTouched(fn: any): void;
    setDisabledState(isDisabled: boolean): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    createElement(): void;
    initialise(): void;
    private getScriptSrc;
    private initEditor;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<EditorComponent, [null, null, null, { optional: true; }]>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<EditorComponent, "editor", never, { "cloudChannel": "cloudChannel"; "apiKey": "apiKey"; "id": "id"; "disabled": "disabled"; "initialValue": "initialValue"; "init": "init"; "inline": "inline"; "outputFormat": "outputFormat"; "tagName": "tagName"; "plugins": "plugins"; "toolbar": "toolbar"; }, {}, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWRpdG9yLmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJlZGl0b3IuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFmdGVyVmlld0luaXQsIEVsZW1lbnRSZWYsIE5nWm9uZSwgT25EZXN0cm95LCBJbmplY3Rpb25Ub2tlbiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29udHJvbFZhbHVlQWNjZXNzb3IgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyBFdmVudHMgfSBmcm9tICcuL0V2ZW50cyc7XG5leHBvcnQgZGVjbGFyZSBjb25zdCBUSU5ZTUNFX1NDUklQVF9TUkM6IEluamVjdGlvblRva2VuPHN0cmluZz47XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBFZGl0b3JDb21wb25lbnQgZXh0ZW5kcyBFdmVudHMgaW1wbGVtZW50cyBBZnRlclZpZXdJbml0LCBDb250cm9sVmFsdWVBY2Nlc3NvciwgT25EZXN0cm95IHtcbiAgICBwcml2YXRlIHBsYXRmb3JtSWQ7XG4gICAgcHJpdmF0ZSB0aW55bWNlU2NyaXB0U3JjPztcbiAgICBkaXNhYmxlZDogYW55O1xuICAgIHJlYWRvbmx5IGVkaXRvcjogYW55O1xuICAgIG5nWm9uZTogTmdab25lO1xuICAgIGNsb3VkQ2hhbm5lbDogc3RyaW5nO1xuICAgIGFwaUtleTogc3RyaW5nO1xuICAgIGluaXQ6IFJlY29yZDxzdHJpbmcsIGFueT4gfCB1bmRlZmluZWQ7XG4gICAgaWQ6IHN0cmluZztcbiAgICBpbml0aWFsVmFsdWU6IHN0cmluZyB8IHVuZGVmaW5lZDtcbiAgICBvdXRwdXRGb3JtYXQ6ICdodG1sJyB8ICd0ZXh0JyB8IHVuZGVmaW5lZDtcbiAgICBpbmxpbmU6IGJvb2xlYW4gfCB1bmRlZmluZWQ7XG4gICAgdGFnTmFtZTogc3RyaW5nIHwgdW5kZWZpbmVkO1xuICAgIHBsdWdpbnM6IHN0cmluZyB8IHVuZGVmaW5lZDtcbiAgICB0b29sYmFyOiBzdHJpbmcgfCBzdHJpbmdbXSB8IHVuZGVmaW5lZDtcbiAgICBwcml2YXRlIF9lbGVtZW50UmVmO1xuICAgIHByaXZhdGUgX2VsZW1lbnQ7XG4gICAgcHJpdmF0ZSBfZGlzYWJsZWQ7XG4gICAgcHJpdmF0ZSBfZWRpdG9yO1xuICAgIHByaXZhdGUgb25Ub3VjaGVkQ2FsbGJhY2s7XG4gICAgcHJpdmF0ZSBvbkNoYW5nZUNhbGxiYWNrO1xuICAgIGNvbnN0cnVjdG9yKGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYsIG5nWm9uZTogTmdab25lLCBwbGF0Zm9ybUlkOiBPYmplY3QsIHRpbnltY2VTY3JpcHRTcmM/OiBzdHJpbmcpO1xuICAgIHdyaXRlVmFsdWUodmFsdWU6IHN0cmluZyB8IG51bGwpOiB2b2lkO1xuICAgIHJlZ2lzdGVyT25DaGFuZ2UoZm46IChfOiBhbnkpID0+IHZvaWQpOiB2b2lkO1xuICAgIHJlZ2lzdGVyT25Ub3VjaGVkKGZuOiBhbnkpOiB2b2lkO1xuICAgIHNldERpc2FibGVkU3RhdGUoaXNEaXNhYmxlZDogYm9vbGVhbik6IHZvaWQ7XG4gICAgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQ7XG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcbiAgICBjcmVhdGVFbGVtZW50KCk6IHZvaWQ7XG4gICAgaW5pdGlhbGlzZSgpOiB2b2lkO1xuICAgIHByaXZhdGUgZ2V0U2NyaXB0U3JjO1xuICAgIHByaXZhdGUgaW5pdEVkaXRvcjtcbn1cbiJdfQ==