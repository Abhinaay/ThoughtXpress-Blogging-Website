import { __decorate, __metadata, __extends, __assign, __param } from 'tslib';
import { Output, EventEmitter, InjectionToken, forwardRef, Input, Component, Inject, PLATFORM_ID, Optional, ElementRef, NgZone, NgModule } from '@angular/core';
import { isPlatformBrowser, CommonModule } from '@angular/common';
import { NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';

/**
 * Copyright (c) 2017-present, Ephox, Inc.
 *
 * This source code is licensed under the Apache 2 license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */
var getTinymce = function () {
    var w = typeof window !== 'undefined' ? window : undefined;
    return w && w.tinymce ? w.tinymce : null;
};

var Events = /** @class */ (function () {
    function Events() {
        this.onBeforePaste = new EventEmitter();
        this.onBlur = new EventEmitter();
        this.onClick = new EventEmitter();
        this.onContextMenu = new EventEmitter();
        this.onCopy = new EventEmitter();
        this.onCut = new EventEmitter();
        this.onDblclick = new EventEmitter();
        this.onDrag = new EventEmitter();
        this.onDragDrop = new EventEmitter();
        this.onDragEnd = new EventEmitter();
        this.onDragGesture = new EventEmitter();
        this.onDragOver = new EventEmitter();
        this.onDrop = new EventEmitter();
        this.onFocus = new EventEmitter();
        this.onFocusIn = new EventEmitter();
        this.onFocusOut = new EventEmitter();
        this.onKeyDown = new EventEmitter();
        this.onKeyPress = new EventEmitter();
        this.onKeyUp = new EventEmitter();
        this.onMouseDown = new EventEmitter();
        this.onMouseEnter = new EventEmitter();
        this.onMouseLeave = new EventEmitter();
        this.onMouseMove = new EventEmitter();
        this.onMouseOut = new EventEmitter();
        this.onMouseOver = new EventEmitter();
        this.onMouseUp = new EventEmitter();
        this.onPaste = new EventEmitter();
        this.onSelectionChange = new EventEmitter();
        this.onActivate = new EventEmitter();
        this.onAddUndo = new EventEmitter();
        this.onBeforeAddUndo = new EventEmitter();
        this.onBeforeExecCommand = new EventEmitter();
        this.onBeforeGetContent = new EventEmitter();
        this.onBeforeRenderUI = new EventEmitter();
        this.onBeforeSetContent = new EventEmitter();
        this.onChange = new EventEmitter();
        this.onClearUndos = new EventEmitter();
        this.onDeactivate = new EventEmitter();
        this.onDirty = new EventEmitter();
        this.onExecCommand = new EventEmitter();
        this.onGetContent = new EventEmitter();
        this.onHide = new EventEmitter();
        this.onInit = new EventEmitter();
        this.onLoadContent = new EventEmitter();
        this.onNodeChange = new EventEmitter();
        this.onPostProcess = new EventEmitter();
        this.onPostRender = new EventEmitter();
        this.onPreInit = new EventEmitter();
        this.onPreProcess = new EventEmitter();
        this.onProgressState = new EventEmitter();
        this.onRedo = new EventEmitter();
        this.onRemove = new EventEmitter();
        this.onReset = new EventEmitter();
        this.onSaveContent = new EventEmitter();
        this.onSetAttrib = new EventEmitter();
        this.onObjectResizeStart = new EventEmitter();
        this.onObjectResized = new EventEmitter();
        this.onObjectSelected = new EventEmitter();
        this.onSetContent = new EventEmitter();
        this.onShow = new EventEmitter();
        this.onSubmit = new EventEmitter();
        this.onUndo = new EventEmitter();
        this.onVisualAid = new EventEmitter();
    }
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], Events.prototype, "onBeforePaste", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], Events.prototype, "onBlur", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], Events.prototype, "onClick", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], Events.prototype, "onContextMenu", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], Events.prototype, "onCopy", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], Events.prototype, "onCut", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], Events.prototype, "onDblclick", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], Events.prototype, "onDrag", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], Events.prototype, "onDragDrop", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], Events.prototype, "onDragEnd", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], Events.prototype, "onDragGesture", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], Events.prototype, "onDragOver", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], Events.prototype, "onDrop", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], Events.prototype, "onFocus", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], Events.prototype, "onFocusIn", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], Events.prototype, "onFocusOut", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], Events.prototype, "onKeyDown", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], Events.prototype, "onKeyPress", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], Events.prototype, "onKeyUp", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], Events.prototype, "onMouseDown", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], Events.prototype, "onMouseEnter", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], Events.prototype, "onMouseLeave", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], Events.prototype, "onMouseMove", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], Events.prototype, "onMouseOut", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], Events.prototype, "onMouseOver", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], Events.prototype, "onMouseUp", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], Events.prototype, "onPaste", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], Events.prototype, "onSelectionChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], Events.prototype, "onActivate", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], Events.prototype, "onAddUndo", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], Events.prototype, "onBeforeAddUndo", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], Events.prototype, "onBeforeExecCommand", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], Events.prototype, "onBeforeGetContent", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], Events.prototype, "onBeforeRenderUI", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], Events.prototype, "onBeforeSetContent", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], Events.prototype, "onChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], Events.prototype, "onClearUndos", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], Events.prototype, "onDeactivate", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], Events.prototype, "onDirty", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], Events.prototype, "onExecCommand", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], Events.prototype, "onGetContent", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], Events.prototype, "onHide", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], Events.prototype, "onInit", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], Events.prototype, "onLoadContent", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], Events.prototype, "onNodeChange", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], Events.prototype, "onPostProcess", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], Events.prototype, "onPostRender", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], Events.prototype, "onPreInit", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], Events.prototype, "onPreProcess", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], Events.prototype, "onProgressState", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], Events.prototype, "onRedo", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], Events.prototype, "onRemove", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], Events.prototype, "onReset", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], Events.prototype, "onSaveContent", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], Events.prototype, "onSetAttrib", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], Events.prototype, "onObjectResizeStart", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], Events.prototype, "onObjectResized", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], Events.prototype, "onObjectSelected", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], Events.prototype, "onSetContent", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], Events.prototype, "onShow", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], Events.prototype, "onSubmit", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], Events.prototype, "onUndo", void 0);
    __decorate([
        Output(),
        __metadata("design:type", EventEmitter)
    ], Events.prototype, "onVisualAid", void 0);
    return Events;
}());
var validEvents = [
    'onActivate',
    'onAddUndo',
    'onBeforeAddUndo',
    'onBeforeExecCommand',
    'onBeforeGetContent',
    'onBeforeRenderUI',
    'onBeforeSetContent',
    'onBeforePaste',
    'onBlur',
    'onChange',
    'onClearUndos',
    'onClick',
    'onContextMenu',
    'onCopy',
    'onCut',
    'onDblclick',
    'onDeactivate',
    'onDirty',
    'onDrag',
    'onDragDrop',
    'onDragEnd',
    'onDragGesture',
    'onDragOver',
    'onDrop',
    'onExecCommand',
    'onFocus',
    'onFocusIn',
    'onFocusOut',
    'onGetContent',
    'onHide',
    'onInit',
    'onKeyDown',
    'onKeyPress',
    'onKeyUp',
    'onLoadContent',
    'onMouseDown',
    'onMouseEnter',
    'onMouseLeave',
    'onMouseMove',
    'onMouseOut',
    'onMouseOver',
    'onMouseUp',
    'onNodeChange',
    'onObjectResizeStart',
    'onObjectResized',
    'onObjectSelected',
    'onPaste',
    'onPostProcess',
    'onPostRender',
    'onPreProcess',
    'onProgressState',
    'onRedo',
    'onRemove',
    'onReset',
    'onSaveContent',
    'onSelectionChange',
    'onSetAttrib',
    'onSetContent',
    'onShow',
    'onSubmit',
    'onUndo',
    'onVisualAid'
];

/**
 * Copyright (c) 2017-present, Ephox, Inc.
 *
 * This source code is licensed under the Apache 2 license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */
var bindHandlers = function (ctx, editor, initEvent) {
    validEvents.forEach(function (eventName) {
        var eventEmitter = ctx[eventName];
        if (eventName === 'onInit') {
            ctx.ngZone.run(function () { return eventEmitter.emit({ event: initEvent, editor: editor }); });
        }
        else {
            editor.on(eventName.substring(2), function (event) { return ctx.ngZone.run(function () { return eventEmitter.emit({ event: event, editor: editor }); }); });
        }
    });
};
var unique = 0;
var uuid = function (prefix) {
    var date = new Date();
    var time = date.getTime();
    var random = Math.floor(Math.random() * 1000000000);
    unique++;
    return prefix + '_' + random + unique + String(time);
};
var isTextarea = function (element) {
    return typeof element !== 'undefined' && element.tagName.toLowerCase() === 'textarea';
};
var normalizePluginArray = function (plugins) {
    if (typeof plugins === 'undefined' || plugins === '') {
        return [];
    }
    return Array.isArray(plugins) ? plugins : plugins.split(' ');
};
var mergePlugins = function (initPlugins, inputPlugins) {
    return normalizePluginArray(initPlugins).concat(normalizePluginArray(inputPlugins));
};
// tslint:disable-next-line:no-empty
var noop = function () { };
var isNullOrUndefined = function (value) { return value === null || value === undefined; };

/**
 * Copyright (c) 2017-present, Ephox, Inc.
 *
 * This source code is licensed under the Apache 2 license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */
var createState = function () {
    return {
        listeners: [],
        scriptId: uuid('tiny-script'),
        scriptLoaded: false
    };
};
var CreateScriptLoader = function () {
    var state = createState();
    var injectScriptTag = function (scriptId, doc, url, callback) {
        var scriptTag = doc.createElement('script');
        scriptTag.referrerPolicy = 'origin';
        scriptTag.type = 'application/javascript';
        scriptTag.id = scriptId;
        scriptTag.src = url;
        var handler = function () {
            scriptTag.removeEventListener('load', handler);
            callback();
        };
        scriptTag.addEventListener('load', handler);
        if (doc.head) {
            doc.head.appendChild(scriptTag);
        }
    };
    var load = function (doc, url, callback) {
        if (state.scriptLoaded) {
            callback();
        }
        else {
            state.listeners.push(callback);
            if (!doc.getElementById(state.scriptId)) {
                injectScriptTag(state.scriptId, doc, url, function () {
                    state.listeners.forEach(function (fn) { return fn(); });
                    state.scriptLoaded = true;
                });
            }
        }
    };
    // Only to be used by tests.
    var reinitialize = function () {
        state = createState();
    };
    return {
        load: load,
        reinitialize: reinitialize
    };
};
var ScriptLoader = CreateScriptLoader();

var TINYMCE_SCRIPT_SRC = new InjectionToken('TINYMCE_SCRIPT_SRC');
var EDITOR_COMPONENT_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(function () { return EditorComponent; }),
    multi: true
};
var EditorComponent = /** @class */ (function (_super) {
    __extends(EditorComponent, _super);
    function EditorComponent(elementRef, ngZone, platformId, tinymceScriptSrc) {
        var _this = _super.call(this) || this;
        _this.platformId = platformId;
        _this.tinymceScriptSrc = tinymceScriptSrc;
        _this.cloudChannel = '5';
        _this.apiKey = 'no-api-key';
        _this.id = '';
        _this.onTouchedCallback = noop;
        _this.onChangeCallback = noop;
        _this._elementRef = elementRef;
        _this.ngZone = ngZone;
        _this.initialise = _this.initialise.bind(_this);
        return _this;
    }
    Object.defineProperty(EditorComponent.prototype, "disabled", {
        get: function () {
            return this._disabled;
        },
        set: function (val) {
            this._disabled = val;
            if (this._editor && this._editor.initialized) {
                this._editor.setMode(val ? 'readonly' : 'design');
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EditorComponent.prototype, "editor", {
        get: function () {
            return this._editor;
        },
        enumerable: true,
        configurable: true
    });
    EditorComponent.prototype.writeValue = function (value) {
        if (this._editor && this._editor.initialized) {
            this._editor.setContent(isNullOrUndefined(value) ? '' : value);
        }
        else {
            this.initialValue = value === null ? undefined : value;
        }
    };
    EditorComponent.prototype.registerOnChange = function (fn) {
        this.onChangeCallback = fn;
    };
    EditorComponent.prototype.registerOnTouched = function (fn) {
        this.onTouchedCallback = fn;
    };
    EditorComponent.prototype.setDisabledState = function (isDisabled) {
        if (this._editor) {
            this._editor.setMode(isDisabled ? 'readonly' : 'design');
        }
        else if (isDisabled) {
            this.init = __assign({}, this.init, { readonly: true });
        }
    };
    EditorComponent.prototype.ngAfterViewInit = function () {
        if (isPlatformBrowser(this.platformId)) {
            this.id = this.id || uuid('tiny-angular');
            this.inline =
                typeof this.inline !== 'undefined' ? (typeof this.inline === 'boolean' ? this.inline : true) : this.init && this.init.inline;
            this.createElement();
            if (getTinymce() !== null) {
                this.initialise();
            }
            else if (this._element && this._element.ownerDocument) {
                ScriptLoader.load(this._element.ownerDocument, this.getScriptSrc(), this.initialise);
            }
        }
    };
    EditorComponent.prototype.ngOnDestroy = function () {
        if (getTinymce() !== null) {
            getTinymce().remove(this._editor);
        }
    };
    EditorComponent.prototype.createElement = function () {
        var tagName = typeof this.tagName === 'string' ? this.tagName : 'div';
        this._element = document.createElement(this.inline ? tagName : 'textarea');
        if (this._element) {
            this._element.id = this.id;
            if (isTextarea(this._element)) {
                this._element.style.visibility = 'hidden';
            }
            this._elementRef.nativeElement.appendChild(this._element);
        }
    };
    EditorComponent.prototype.initialise = function () {
        var _this = this;
        var finalInit = __assign({}, this.init, { target: this._element, inline: this.inline, readonly: this.disabled, plugins: mergePlugins(this.init && this.init.plugins, this.plugins), toolbar: this.toolbar || (this.init && this.init.toolbar), setup: function (editor) {
                _this._editor = editor;
                editor.on('init', function (e) {
                    _this.initEditor(e, editor);
                });
                if (_this.init && typeof _this.init.setup === 'function') {
                    _this.init.setup(editor);
                }
            } });
        if (isTextarea(this._element)) {
            this._element.style.visibility = '';
        }
        this.ngZone.runOutsideAngular(function () {
            getTinymce().init(finalInit);
        });
    };
    EditorComponent.prototype.getScriptSrc = function () {
        return isNullOrUndefined(this.tinymceScriptSrc) ?
            "https://cdn.tiny.cloud/1/" + this.apiKey + "/tinymce/" + this.cloudChannel + "/tinymce.min.js" :
            this.tinymceScriptSrc;
    };
    EditorComponent.prototype.initEditor = function (initEvent, editor) {
        var _this = this;
        if (typeof this.initialValue === 'string') {
            this.ngZone.run(function () { return editor.setContent(_this.initialValue); });
        }
        editor.on('blur', function () { return _this.ngZone.run(function () { return _this.onTouchedCallback(); }); });
        editor.on('change keyup undo redo', function () {
            _this.ngZone.run(function () { return _this.onChangeCallback(editor.getContent({ format: _this.outputFormat })); });
        });
        bindHandlers(this, editor, initEvent);
    };
    __decorate([
        Input(),
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [Object])
    ], EditorComponent.prototype, "disabled", null);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], EditorComponent.prototype, "cloudChannel", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], EditorComponent.prototype, "apiKey", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], EditorComponent.prototype, "init", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], EditorComponent.prototype, "id", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], EditorComponent.prototype, "initialValue", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], EditorComponent.prototype, "outputFormat", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Boolean)
    ], EditorComponent.prototype, "inline", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], EditorComponent.prototype, "tagName", void 0);
    __decorate([
        Input(),
        __metadata("design:type", String)
    ], EditorComponent.prototype, "plugins", void 0);
    __decorate([
        Input(),
        __metadata("design:type", Object)
    ], EditorComponent.prototype, "toolbar", void 0);
    EditorComponent = __decorate([
        Component({
            selector: 'editor',
            template: '<ng-template></ng-template>',
            providers: [EDITOR_COMPONENT_VALUE_ACCESSOR],
            styles: [':host { display: block; }']
        }),
        __param(2, Inject(PLATFORM_ID)),
        __param(3, Optional()), __param(3, Inject(TINYMCE_SCRIPT_SRC)),
        __metadata("design:paramtypes", [ElementRef,
            NgZone,
            Object, String])
    ], EditorComponent);
    return EditorComponent;
}(Events));

var EditorModule = /** @class */ (function () {
    function EditorModule() {
    }
    EditorModule = __decorate([
        NgModule({
            imports: [CommonModule, FormsModule],
            declarations: [EditorComponent],
            exports: [EditorComponent]
        })
    ], EditorModule);
    return EditorModule;
}());

/**
 * Generated bundle index. Do not edit.
 */

export { EditorComponent, EditorModule, TINYMCE_SCRIPT_SRC, Events as ɵa };
//# sourceMappingURL=tinymce-tinymce-angular.js.map
