{
  "version": 3,
  "file": "w-ng5.js",
  "sources": [
    "ng://w-ng5/out/src/app/pipes/pipes.module.ts",
    "ng://w-ng5/out/src/app/pipes/filter.pipe.ts"
  ],
  "sourcesContent": [
    "import { Pipe, PipeTransform, NgModule } from '@angular/core';\r\n\r\nimport { FilterPipe } from './filter.pipe';\r\n/*\r\nexport interface FilterParam {\r\n  field: string;\r\n  value: string;\r\n}\r\n\r\n@Pipe({\r\n  name: 'filter',\r\n  pure: true\r\n})\r\nexport class FilterPipe implements PipeTransform {\r\n\r\n  transform(values: any[], filter: any): any {\r\n\r\n    if (filter instanceof Array) {\r\n      return this.checkComplexType(values, filter);\r\n    } else {\r\n      return this.checkSimpleType(values, filter);\r\n    }\r\n  }\r\n\r\n  private checkSimpleType(values, filter: any): any {\r\n    if (!values || !filter) {\r\n      return values;\r\n    }\r\n    return values.filter(item => item.toString().toLowerCase().indexOf(filter.toString().toLowerCase()) !== -1);\r\n  }\r\n\r\n  private checkComplexType(values, filter: Array<FilterParam>): any {\r\n\r\n    if (!values || !filter || filter.length === 0) {\r\n      return values;\r\n    }\r\n\r\n    const result = [];\r\n\r\n    // find in all records\r\n    values.forEach(row => {\r\n      let match = false;\r\n      // find in all filters in the array of filters\r\n      filter.forEach( field => {\r\n        match = match || this.checkValue(row, field);\r\n      });\r\n      if (match) {\r\n        result.push(row); // add row in return\r\n      }\r\n    });\r\n\r\n    return result;\r\n\r\n  }\r\n\r\n  private checkValue(item, filter): boolean {\r\n    if (!filter || !filter.field || !filter.value || filter.value === '') {\r\n      return true;\r\n    }\r\n    if (this.existDot(filter.field)) {\r\n      return this.parseValue(item, filter.value, filter.field);\r\n      // return false;\r\n    } else {\r\n      if (item[filter.field]) {\r\n          return item[filter.field].toString().toLowerCase().indexOf(filter.value.toString().toLowerCase()) !== -1;\r\n      } else {\r\n          return false;\r\n      }\r\n    }\r\n  }\r\n\r\n  private parseValue(reference, search, filter): boolean {\r\n    const fields = filter.split('.');\r\n    return this.existFieldValue(reference, search, fields, 0);\r\n  }\r\n\r\n  private existDot(path: string): boolean {\r\n    return path.indexOf('.') > -1;\r\n  }\r\n\r\n  private existFieldValue(obj, search, fieldFind, indexFind: number): boolean {\r\n    // Lê o valor da propriedade\r\n    const ref = obj[fieldFind[indexFind]];\r\n    // Se estiver no último nível...\r\n    if (indexFind === fieldFind.length - 1) {\r\n      // Se tiver valor, confere se contém o que está procurando...\r\n      if (ref) {\r\n        return ref.toString().toLowerCase().indexOf(search.toString().toLowerCase()) !== -1;\r\n      } else {\r\n        return false;\r\n      }\r\n    // Não está no último nível mas há valor na referência\r\n    } else if (ref) {\r\n      return this.existFieldValue(ref, search, fieldFind, ++indexFind);\r\n    // Não está no último nível e não há valor na referência (null)\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n}*/\r\n\r\n@NgModule({\r\n  declarations: [FilterPipe],\r\n  exports: [FilterPipe],\r\n  providers: [FilterPipe]\r\n})\r\nexport class PipesModule { }\r\n",
    "import { Pipe, PipeTransform } from '@angular/core';\r\n\r\nexport interface FilterParam {\r\n  field: string;\r\n  value: string;\r\n}\r\n\r\n@Pipe({\r\n  name: 'filter',\r\n  pure: true\r\n})\r\nexport class FilterPipe implements PipeTransform {\r\n\r\n  transform(values: any[], filter: any): any {\r\n\r\n    if (filter instanceof Array) {\r\n      return this.checkComplexType(values, filter);\r\n    } else {\r\n      return this.checkSimpleType(values, filter);\r\n    }\r\n  }\r\n\r\n  private checkSimpleType(values, filter: any): any {\r\n    if (!values || !filter) {\r\n      return values;\r\n    }\r\n    return values.filter(item => item.toString().toLowerCase().indexOf(filter.toString().toLowerCase()) !== -1);\r\n  }\r\n\r\n  private checkComplexType(values, filter: Array<FilterParam>): any {\r\n\r\n    if (!values || !filter || filter.length === 0) {\r\n      return values;\r\n    }\r\n\r\n    const result = [];\r\n\r\n    // find in all records\r\n    values.forEach(row => {\r\n      let match = false;\r\n      // find in all filters in the array of filters\r\n      filter.forEach( field => {\r\n        match = match || this.checkValue(row, field);\r\n      });\r\n      if (match) {\r\n        result.push(row); // add row in return\r\n      }\r\n    });\r\n\r\n    return result;\r\n\r\n  }\r\n\r\n  private checkValue(item, filter): boolean {\r\n    if (!filter || !filter.field || !filter.value || filter.value === '') {\r\n      return true;\r\n    }\r\n    if (this.existDot(filter.field)) {\r\n      return this.parseValue(item, filter.value, filter.field);\r\n      // return false;\r\n    } else {\r\n      if (item[filter.field]) {\r\n          return item[filter.field].toString().toLowerCase().indexOf(filter.value.toString().toLowerCase()) !== -1;\r\n      } else {\r\n          return false;\r\n      }\r\n    }\r\n  }\r\n\r\n  private parseValue(reference, search, filter): boolean {\r\n    const fields = filter.split('.');\r\n    return this.existFieldValue(reference, search, fields, 0);\r\n  }\r\n\r\n  private existDot(path: string): boolean {\r\n    return path.indexOf('.') > -1;\r\n  }\r\n\r\n  private existFieldValue(obj, search, fieldFind, indexFind: number): boolean {\r\n    // Lê o valor da propriedade\r\n    const ref = obj[fieldFind[indexFind]];\r\n    // Se estiver no último nível...\r\n    if (indexFind === fieldFind.length - 1) {\r\n      // Se tiver valor, confere se contém o que está procurando...\r\n      if (ref) {\r\n        return ref.toString().toLowerCase().indexOf(search.toString().toLowerCase()) !== -1;\r\n      } else {\r\n        return false;\r\n      }\r\n    // Não está no último nível mas há valor na referência\r\n    } else if (ref) {\r\n      return this.existFieldValue(ref, search, fieldFind, ++indexFind);\r\n    // Não está no último nível e não há valor na referência (null)\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n}\r\n"
  ],
  "names": [],
  "mappings": "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"
}
