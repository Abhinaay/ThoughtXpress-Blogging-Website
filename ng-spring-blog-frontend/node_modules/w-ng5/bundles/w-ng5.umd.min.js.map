{
  "version": 3,
  "file": "w-ng5.umd.min.js",
  "sources": [
    "ng://w-ng5/out/src/app/pipes/filter.pipe.ts",
    "ng://w-ng5/out/src/app/pipes/pipes.module.ts"
  ],
  "sourcesContent": [
    "import { Pipe, PipeTransform } from '@angular/core';\r\n\r\nexport interface FilterParam {\r\n  field: string;\r\n  value: string;\r\n}\r\n\r\n@Pipe({\r\n  name: 'filter',\r\n  pure: true\r\n})\r\nexport class FilterPipe implements PipeTransform {\r\n\r\n  transform(values: any[], filter: any): any {\r\n\r\n    if (filter instanceof Array) {\r\n      return this.checkComplexType(values, filter);\r\n    } else {\r\n      return this.checkSimpleType(values, filter);\r\n    }\r\n  }\r\n\r\n  private checkSimpleType(values, filter: any): any {\r\n    if (!values || !filter) {\r\n      return values;\r\n    }\r\n    return values.filter(item => item.toString().toLowerCase().indexOf(filter.toString().toLowerCase()) !== -1);\r\n  }\r\n\r\n  private checkComplexType(values, filter: Array<FilterParam>): any {\r\n\r\n    if (!values || !filter || filter.length === 0) {\r\n      return values;\r\n    }\r\n\r\n    const result = [];\r\n\r\n    // find in all records\r\n    values.forEach(row => {\r\n      let match = false;\r\n      // find in all filters in the array of filters\r\n      filter.forEach( field => {\r\n        match = match || this.checkValue(row, field);\r\n      });\r\n      if (match) {\r\n        result.push(row); // add row in return\r\n      }\r\n    });\r\n\r\n    return result;\r\n\r\n  }\r\n\r\n  private checkValue(item, filter): boolean {\r\n    if (!filter || !filter.field || !filter.value || filter.value === '') {\r\n      return true;\r\n    }\r\n    if (this.existDot(filter.field)) {\r\n      return this.parseValue(item, filter.value, filter.field);\r\n      // return false;\r\n    } else {\r\n      if (item[filter.field]) {\r\n          return item[filter.field].toString().toLowerCase().indexOf(filter.value.toString().toLowerCase()) !== -1;\r\n      } else {\r\n          return false;\r\n      }\r\n    }\r\n  }\r\n\r\n  private parseValue(reference, search, filter): boolean {\r\n    const fields = filter.split('.');\r\n    return this.existFieldValue(reference, search, fields, 0);\r\n  }\r\n\r\n  private existDot(path: string): boolean {\r\n    return path.indexOf('.') > -1;\r\n  }\r\n\r\n  private existFieldValue(obj, search, fieldFind, indexFind: number): boolean {\r\n    // Lê o valor da propriedade\r\n    const ref = obj[fieldFind[indexFind]];\r\n    // Se estiver no último nível...\r\n    if (indexFind === fieldFind.length - 1) {\r\n      // Se tiver valor, confere se contém o que está procurando...\r\n      if (ref) {\r\n        return ref.toString().toLowerCase().indexOf(search.toString().toLowerCase()) !== -1;\r\n      } else {\r\n        return false;\r\n      }\r\n    // Não está no último nível mas há valor na referência\r\n    } else if (ref) {\r\n      return this.existFieldValue(ref, search, fieldFind, ++indexFind);\r\n    // Não está no último nível e não há valor na referência (null)\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n}\r\n",
    "import { Pipe, PipeTransform, NgModule } from '@angular/core';\r\n\r\nimport { FilterPipe } from './filter.pipe';\r\n/*\r\nexport interface FilterParam {\r\n  field: string;\r\n  value: string;\r\n}\r\n\r\n@Pipe({\r\n  name: 'filter',\r\n  pure: true\r\n})\r\nexport class FilterPipe implements PipeTransform {\r\n\r\n  transform(values: any[], filter: any): any {\r\n\r\n    if (filter instanceof Array) {\r\n      return this.checkComplexType(values, filter);\r\n    } else {\r\n      return this.checkSimpleType(values, filter);\r\n    }\r\n  }\r\n\r\n  private checkSimpleType(values, filter: any): any {\r\n    if (!values || !filter) {\r\n      return values;\r\n    }\r\n    return values.filter(item => item.toString().toLowerCase().indexOf(filter.toString().toLowerCase()) !== -1);\r\n  }\r\n\r\n  private checkComplexType(values, filter: Array<FilterParam>): any {\r\n\r\n    if (!values || !filter || filter.length === 0) {\r\n      return values;\r\n    }\r\n\r\n    const result = [];\r\n\r\n    // find in all records\r\n    values.forEach(row => {\r\n      let match = false;\r\n      // find in all filters in the array of filters\r\n      filter.forEach( field => {\r\n        match = match || this.checkValue(row, field);\r\n      });\r\n      if (match) {\r\n        result.push(row); // add row in return\r\n      }\r\n    });\r\n\r\n    return result;\r\n\r\n  }\r\n\r\n  private checkValue(item, filter): boolean {\r\n    if (!filter || !filter.field || !filter.value || filter.value === '') {\r\n      return true;\r\n    }\r\n    if (this.existDot(filter.field)) {\r\n      return this.parseValue(item, filter.value, filter.field);\r\n      // return false;\r\n    } else {\r\n      if (item[filter.field]) {\r\n          return item[filter.field].toString().toLowerCase().indexOf(filter.value.toString().toLowerCase()) !== -1;\r\n      } else {\r\n          return false;\r\n      }\r\n    }\r\n  }\r\n\r\n  private parseValue(reference, search, filter): boolean {\r\n    const fields = filter.split('.');\r\n    return this.existFieldValue(reference, search, fields, 0);\r\n  }\r\n\r\n  private existDot(path: string): boolean {\r\n    return path.indexOf('.') > -1;\r\n  }\r\n\r\n  private existFieldValue(obj, search, fieldFind, indexFind: number): boolean {\r\n    // Lê o valor da propriedade\r\n    const ref = obj[fieldFind[indexFind]];\r\n    // Se estiver no último nível...\r\n    if (indexFind === fieldFind.length - 1) {\r\n      // Se tiver valor, confere se contém o que está procurando...\r\n      if (ref) {\r\n        return ref.toString().toLowerCase().indexOf(search.toString().toLowerCase()) !== -1;\r\n      } else {\r\n        return false;\r\n      }\r\n    // Não está no último nível mas há valor na referência\r\n    } else if (ref) {\r\n      return this.existFieldValue(ref, search, fieldFind, ++indexFind);\r\n    // Não está no último nível e não há valor na referência (null)\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n}*/\r\n\r\n@NgModule({\r\n  declarations: [FilterPipe],\r\n  exports: [FilterPipe],\r\n  providers: [FilterPipe]\r\n})\r\nexport class PipesModule { }\r\n"
  ],
  "names": [
    "FilterPipe",
    "prototype",
    "transform",
    "values",
    "filter",
    "Array",
    "this",
    "checkComplexType",
    "checkSimpleType",
    "item",
    "toString",
    "toLowerCase",
    "indexOf",
    "_this",
    "length",
    "result",
    "forEach",
    "row",
    "match",
    "field",
    "checkValue",
    "push",
    "value",
    "existDot",
    "parseValue",
    "reference",
    "search",
    "fields",
    "split",
    "existFieldValue",
    "path",
    "obj",
    "fieldFind",
    "indexFind",
    "ref",
    "type",
    "Pipe",
    "args",
    "name",
    "pure",
    "PipesModule",
    "NgModule",
    "declarations",
    "exports",
    "providers"
  ],
  "mappings": "wPAWA,IAAAA,EAAA,WAAA,SAAAA,YAEEA,EAAFC,UAAAC,UAAE,SAAUC,EAAeC,GAEvB,OAAIA,aAAkBC,MACbC,KAAKC,iBAAiBJ,EAAQC,GAE9BE,KAAKE,gBAAgBL,EAAQC,IAIhCJ,EAAVC,UAAAO,gBAAU,SAAgBL,EAAQC,GAC9B,OAAKD,GAAWC,EAGTD,EAAOC,OAAO,SAAAK,GAAQ,OAA4E,IAA5EA,EAAKC,WAAWC,cAAcC,QAAQR,EAAOM,WAAWC,iBAF5ER,GAKHH,EAAVC,UAAAM,iBAAU,SAAiBJ,EAAQC,GAAzB,IAAVS,EAAAP,KAEI,IAAKH,IAAWC,GAA4B,IAAlBA,EAAOU,OAC/B,OAAOX,EAGT,IAAMY,EAAS,GAcf,OAXAZ,EAAOa,QAAQ,SAAAC,GACb,IAAIC,GAAQ,EAEZd,EAAOY,QAAS,SAAAG,GACdD,EAAQA,GAASL,EAAKO,WAAWH,EAAKE,KAEpCD,GACFH,EAAOM,KAAKJ,KAITF,GAIDf,EAAVC,UAAAmB,WAAU,SAAWX,EAAML,GACvB,QAAKA,GAAWA,EAAOe,OAAUf,EAAOkB,OAA0B,KAAjBlB,EAAOkB,SAGpDhB,KAAKiB,SAASnB,EAAOe,OAChBb,KAAKkB,WAAWf,EAAML,EAAOkB,MAAOlB,EAAOe,SAG9CV,EAAKL,EAAOe,SAC2F,IAAhGV,EAAKL,EAAOe,OAAOT,WAAWC,cAAcC,QAAQR,EAAOkB,MAAMZ,WAAWC,iBAOnFX,EAAVC,UAAAuB,WAAU,SAAWC,EAAWC,EAAQtB,GACpC,IAAMuB,EAASvB,EAAOwB,MAAM,KAC5B,OAAOtB,KAAKuB,gBAAgBJ,EAAWC,EAAQC,EAAQ,IAGjD3B,EAAVC,UAAAsB,SAAU,SAASO,GACf,OAA4B,EAArBA,EAAKlB,QAAQ,MAGdZ,EAAVC,UAAA4B,gBAAU,SAAgBE,EAAKL,EAAQM,EAAWC,GAE9C,IAAMC,EAAMH,EAAIC,EAAUC,IAE1B,OAAIA,IAAcD,EAAUlB,OAAS,IAE/BoB,IACgF,IAA3EA,EAAIxB,WAAWC,cAAcC,QAAQc,EAAOhB,WAAWC,iBAKvDuB,GACF5B,KAAKuB,gBAAgBK,EAAKR,EAAQM,IAAaC,MAhF5D,iBAJA,CAAAE,KAACC,EAAAA,KAADC,KAAA,CAAM,CACJC,KAAM,SACNC,MAAM,MCTR,IAAAC,EAAA,2BAsGA,CAAAL,KAACM,EAAAA,SAADJ,KAAA,CAAU,CACRK,aAAc,CAAC1C,GACf2C,QAAS,CAAC3C,GACV4C,UAAW,CAAC5C"
}
