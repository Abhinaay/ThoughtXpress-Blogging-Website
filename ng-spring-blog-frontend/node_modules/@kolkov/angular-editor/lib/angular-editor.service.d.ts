import { HttpClient, HttpEvent } from '@angular/common/http';
import { Observable } from 'rxjs';
import { CustomClass } from './config';
import * as ɵngcc0 from '@angular/core';
export interface UploadResponse {
    imageUrl: string;
}
export declare class AngularEditorService {
    private http;
    private doc;
    savedSelection: Range | null;
    selectedText: string;
    uploadUrl: string;
    uploadWithCredentials: boolean;
    constructor(http: HttpClient, doc: any);
    /**
     * Executed command from editor header buttons exclude toggleEditorMode
     * @param command string from triggerCommand
     */
    executeCommand(command: string): void;
    /**
     * Create URL link
     * @param url string from UI prompt
     */
    createLink(url: string): void;
    /**
     * insert color either font or background
     *
     * @param color color to be inserted
     * @param where where the color has to be inserted either text/background
     */
    insertColor(color: string, where: string): void;
    /**
     * Set font name
     * @param fontName string
     */
    setFontName(fontName: string): void;
    /**
     * Set font size
     * @param fontSize string
     */
    setFontSize(fontSize: string): void;
    /**
     * Create raw HTML
     * @param html HTML string
     */
    insertHtml(html: string): void;
    /**
     * save selection when the editor is focussed out
     */
    saveSelection: () => void;
    /**
     * restore selection when the editor is focused in
     *
     * saved selection when the editor is focused out
     */
    restoreSelection(): boolean;
    /**
     * setTimeout used for execute 'saveSelection' method in next event loop iteration
     */
    executeInNextQueueIteration(callbackFn: (...args: any[]) => any, timeout?: number): void;
    /** check any selection is made or not */
    private checkSelection;
    /**
     * Upload file to uploadUrl
     * @param file The file
     */
    uploadImage(file: File): Observable<HttpEvent<UploadResponse>>;
    /**
     * Insert image with Url
     * @param imageUrl The imageUrl.
     */
    insertImage(imageUrl: string): void;
    setDefaultParagraphSeparator(separator: string): void;
    createCustomClass(customClass: CustomClass): void;
    insertVideo(videoUrl: string): void;
    private insertYouTubeVideoTag;
    private insertVimeoVideoTag;
    nextNode(node: any): any;
    getRangeSelectedNodes(range: any, includePartiallySelectedContainers: any): any[];
    getSelectedNodes(): any[];
    replaceWithOwnChildren(el: any): void;
    removeSelectedElements(tagNames: any): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<AngularEditorService, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<AngularEditorService>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5ndWxhci1lZGl0b3Iuc2VydmljZS5kLnRzIiwic291cmNlcyI6WyJhbmd1bGFyLWVkaXRvci5zZXJ2aWNlLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEh0dHBDbGllbnQsIEh0dHBFdmVudCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IEN1c3RvbUNsYXNzIH0gZnJvbSAnLi9jb25maWcnO1xuZXhwb3J0IGludGVyZmFjZSBVcGxvYWRSZXNwb25zZSB7XG4gICAgaW1hZ2VVcmw6IHN0cmluZztcbn1cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIEFuZ3VsYXJFZGl0b3JTZXJ2aWNlIHtcbiAgICBwcml2YXRlIGh0dHA7XG4gICAgcHJpdmF0ZSBkb2M7XG4gICAgc2F2ZWRTZWxlY3Rpb246IFJhbmdlIHwgbnVsbDtcbiAgICBzZWxlY3RlZFRleHQ6IHN0cmluZztcbiAgICB1cGxvYWRVcmw6IHN0cmluZztcbiAgICB1cGxvYWRXaXRoQ3JlZGVudGlhbHM6IGJvb2xlYW47XG4gICAgY29uc3RydWN0b3IoaHR0cDogSHR0cENsaWVudCwgZG9jOiBhbnkpO1xuICAgIC8qKlxuICAgICAqIEV4ZWN1dGVkIGNvbW1hbmQgZnJvbSBlZGl0b3IgaGVhZGVyIGJ1dHRvbnMgZXhjbHVkZSB0b2dnbGVFZGl0b3JNb2RlXG4gICAgICogQHBhcmFtIGNvbW1hbmQgc3RyaW5nIGZyb20gdHJpZ2dlckNvbW1hbmRcbiAgICAgKi9cbiAgICBleGVjdXRlQ29tbWFuZChjb21tYW5kOiBzdHJpbmcpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIENyZWF0ZSBVUkwgbGlua1xuICAgICAqIEBwYXJhbSB1cmwgc3RyaW5nIGZyb20gVUkgcHJvbXB0XG4gICAgICovXG4gICAgY3JlYXRlTGluayh1cmw6IHN0cmluZyk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogaW5zZXJ0IGNvbG9yIGVpdGhlciBmb250IG9yIGJhY2tncm91bmRcbiAgICAgKlxuICAgICAqIEBwYXJhbSBjb2xvciBjb2xvciB0byBiZSBpbnNlcnRlZFxuICAgICAqIEBwYXJhbSB3aGVyZSB3aGVyZSB0aGUgY29sb3IgaGFzIHRvIGJlIGluc2VydGVkIGVpdGhlciB0ZXh0L2JhY2tncm91bmRcbiAgICAgKi9cbiAgICBpbnNlcnRDb2xvcihjb2xvcjogc3RyaW5nLCB3aGVyZTogc3RyaW5nKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBTZXQgZm9udCBuYW1lXG4gICAgICogQHBhcmFtIGZvbnROYW1lIHN0cmluZ1xuICAgICAqL1xuICAgIHNldEZvbnROYW1lKGZvbnROYW1lOiBzdHJpbmcpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIFNldCBmb250IHNpemVcbiAgICAgKiBAcGFyYW0gZm9udFNpemUgc3RyaW5nXG4gICAgICovXG4gICAgc2V0Rm9udFNpemUoZm9udFNpemU6IHN0cmluZyk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlIHJhdyBIVE1MXG4gICAgICogQHBhcmFtIGh0bWwgSFRNTCBzdHJpbmdcbiAgICAgKi9cbiAgICBpbnNlcnRIdG1sKGh0bWw6IHN0cmluZyk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogc2F2ZSBzZWxlY3Rpb24gd2hlbiB0aGUgZWRpdG9yIGlzIGZvY3Vzc2VkIG91dFxuICAgICAqL1xuICAgIHNhdmVTZWxlY3Rpb246ICgpID0+IHZvaWQ7XG4gICAgLyoqXG4gICAgICogcmVzdG9yZSBzZWxlY3Rpb24gd2hlbiB0aGUgZWRpdG9yIGlzIGZvY3VzZWQgaW5cbiAgICAgKlxuICAgICAqIHNhdmVkIHNlbGVjdGlvbiB3aGVuIHRoZSBlZGl0b3IgaXMgZm9jdXNlZCBvdXRcbiAgICAgKi9cbiAgICByZXN0b3JlU2VsZWN0aW9uKCk6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogc2V0VGltZW91dCB1c2VkIGZvciBleGVjdXRlICdzYXZlU2VsZWN0aW9uJyBtZXRob2QgaW4gbmV4dCBldmVudCBsb29wIGl0ZXJhdGlvblxuICAgICAqL1xuICAgIGV4ZWN1dGVJbk5leHRRdWV1ZUl0ZXJhdGlvbihjYWxsYmFja0ZuOiAoLi4uYXJnczogYW55W10pID0+IGFueSwgdGltZW91dD86IG51bWJlcik6IHZvaWQ7XG4gICAgLyoqIGNoZWNrIGFueSBzZWxlY3Rpb24gaXMgbWFkZSBvciBub3QgKi9cbiAgICBwcml2YXRlIGNoZWNrU2VsZWN0aW9uO1xuICAgIC8qKlxuICAgICAqIFVwbG9hZCBmaWxlIHRvIHVwbG9hZFVybFxuICAgICAqIEBwYXJhbSBmaWxlIFRoZSBmaWxlXG4gICAgICovXG4gICAgdXBsb2FkSW1hZ2UoZmlsZTogRmlsZSk6IE9ic2VydmFibGU8SHR0cEV2ZW50PFVwbG9hZFJlc3BvbnNlPj47XG4gICAgLyoqXG4gICAgICogSW5zZXJ0IGltYWdlIHdpdGggVXJsXG4gICAgICogQHBhcmFtIGltYWdlVXJsIFRoZSBpbWFnZVVybC5cbiAgICAgKi9cbiAgICBpbnNlcnRJbWFnZShpbWFnZVVybDogc3RyaW5nKTogdm9pZDtcbiAgICBzZXREZWZhdWx0UGFyYWdyYXBoU2VwYXJhdG9yKHNlcGFyYXRvcjogc3RyaW5nKTogdm9pZDtcbiAgICBjcmVhdGVDdXN0b21DbGFzcyhjdXN0b21DbGFzczogQ3VzdG9tQ2xhc3MpOiB2b2lkO1xuICAgIGluc2VydFZpZGVvKHZpZGVvVXJsOiBzdHJpbmcpOiB2b2lkO1xuICAgIHByaXZhdGUgaW5zZXJ0WW91VHViZVZpZGVvVGFnO1xuICAgIHByaXZhdGUgaW5zZXJ0VmltZW9WaWRlb1RhZztcbiAgICBuZXh0Tm9kZShub2RlOiBhbnkpOiBhbnk7XG4gICAgZ2V0UmFuZ2VTZWxlY3RlZE5vZGVzKHJhbmdlOiBhbnksIGluY2x1ZGVQYXJ0aWFsbHlTZWxlY3RlZENvbnRhaW5lcnM6IGFueSk6IGFueVtdO1xuICAgIGdldFNlbGVjdGVkTm9kZXMoKTogYW55W107XG4gICAgcmVwbGFjZVdpdGhPd25DaGlsZHJlbihlbDogYW55KTogdm9pZDtcbiAgICByZW1vdmVTZWxlY3RlZEVsZW1lbnRzKHRhZ05hbWVzOiBhbnkpOiB2b2lkO1xufVxuIl19